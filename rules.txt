align eq Eq
align eq.refl Eq.refl
align eq.symm Eq.symm
align eq.trans Eq.trans
align eq.subst Eq.subst

rename quot Quot
rename quot.mk Quot.mk
rename quot.lift Quot.lift
rename quot.ind Quot.ind

align id_rhs idRhs
align out_param outParam
align opt_param optParam

unchanged propext
unchanged funext
unchanged rfl
unchanged absurd
unchanged congr

unchanged trivial
unchanged id
unchanged id.def

unchanged cond
unchanged mt

unchanged std.prec.default
unchanged implies
unchanged implies.trans
unchanged flip

align not Not

align heq HEq
align heq.refl HEq.refl
align heq.symm HEq.symm
align heq.trans HEq.trans
align heq.subst HEq.subst

align unit Unit
align unit.star Unit.unit
align punit PUnit
align punit.star PUnit.unit

align prod Prod
align prod.mk Prod.mk

align pprod PProd
align pprod.mk PProd.mk

align or Or
align or.inl Or.inl
align or.inr Or.inr

align has_add Add
align has_add.mk Add.mk
align has_add.add Add.add

align has_sub Sub
align has_sub.mk Sub.mk
align has_sub.sub Sub.sub

align has_mul Mul
align has_mul.mk Mul.mk
align has_mul.mul Mul.mul

align has_neg Neg
align has_neg.mk Neg.mk
align has_neg.neg Neg.neg

align has_div Div
align has_div.mk Div.mk
align has_div.div Div.div

align has_mod Mod
align has_mod.mk Mod.mk
align has_mod.mod Mod.mod

align has_le LE
align has_le.mk LE.mk
align has_le.le LE.le

align has_lt LT
align has_lt.mk LT.mk
align has_lt.lt LT.lt

align has_append Append
align has_append.mk Append.mk
align has_append.append Append.append

align has_pure Pure
align has_pure.mk Pure.mk

align has_bind Bind
align has_bind.mk Bind.mk

align functor Functor
align functor.mk Functor.mk

align and And
align and.intro And.intro

align bool Bool
align bool.ff Bool.false
align bool.tt Bool.true

align true True
align true.intro True.intro

align false False

align iff Iff
align iff.intro Iff.intro

align decidable Decidable
align decidable.is_false Decidable.isFalse
align decidable.is_true Decidable.isTrue
align decidable_eq DecidableEq
align decidable_rel DecidableRel

align Exists Exists
align Exists.intro Exists.intro

align inhabited Inhabited
align inhabited.default Inhabited.default
align inhabited.mk Inhabited.mk
align default Inhabited.default

align classical.choice Classical.choice

align nonempty Nonempty
align nonempty.intro Nonempty.intro

align le LessEq
align lt Less

align list List
align list.nil List.nil
align list.cons List.cons

align option Option
align option.none Option.none
align option.some Option.some

align nat Nat
align nat.zero Nat.zero
align nat.succ Nat.succ

align nat.pred Nat.pred
align nat.pred._main Nat.pred

align nat.add Nat.add
align nat.add._main Nat.add

align nat.sub Nat.sub
align nat.sub._main Nat.sub

align nat.mul Nat.mul
align nat.mul._main Nat.mul

align nat.beq Nat.beq
align nat.ble Nat.ble

align int Int
align int.of_nat Int.ofNat
align int.neg_succ_of_nat Int.negSucc

align subtype Subtype
align subtype.mk Subtype.mk

align has_sizeof SizeOf
align has_sizeof.mk SizeOf.mk

# TODO: we comment this out for now, since we are not writing
# code in the same module that imports mathlib.

# noinst bool.decidable_eq
# noinst nat.decidable_eq
# noinst and.decidable
# noinst or.decidable
# noinst iff.decidable
# noinst not.decidable
# noinst implies.decidable
# noinst decidable.true
# noinst decidable.false
# noinst exists_prop_decidable
# noinst forall_prop_decidable
# noinst int.decidable_eq

# TODO: currently, Mathlib's `<` on `Nat` differs from Lean4's
# (and Mathlib's `<` is not being recognized as `decidable`)
# noinst nat.decidable_lt
# noinst nat.decidable_le

neversorry of_as_true

#
# Control
#

align has_pure Pure
align has_pure.mk Pure.mk
align has_pure.pure Pure.pure

align has_seq Seq
align has_seq.mk Seq.mk
align has_seq.seq Seq.seq

align has_seq_left SeqLeft
align has_seq_left.mk SeqLeft.mk
align has_seq_left.seq_left SeqLeft.seqLeft

align has_seq_right SeqRight
align has_seq_right.mk SeqRight.mk
align has_seq_right.seq_right SeqRight.seqRight

align functor Functor
align functor.mk Functor.mk
align functor.map Functor.map
align functor.map_const Functor.mapConst

align applicative Applicative
align applicative.mk Applicative.mk
align applicative.map Applicative.map
align applicative.seq_left Applicative.seqLeft
align applicative.seq_right Applicative.seqRight

align has_bind Bind
align has_bind.mk Bind.mk
align has_bind.bind Bind.bind

align monad Monad
align monad.mk Monad.mk
align monad.map Monad.map
align monad.seq Monad.seq

#
# Things that are added in PrePort
#

align bit0 Mathlib.bit0
align bit1 Mathlib.bit1

align has_zero Mathlib.HasZero
align has_zero.zero Mathlib.HasZero.zero
align has_zero.mk Mathlib.HasZero.mk

align has_one Mathlib.HasOne
align has_one.one Mathlib.HasOne.one
align has_one.mk Mathlib.HasOne.mk

#
# Temporary sorries
#

# sorry bounded_continuous_function.add_comm_group._proof_1
# sorry bounded_continuous_function.add_comm_group._proof_8
# sorry bounded_continuous_function.add_comm_group._proof_9
# sorry bounded_continuous_function.add_comm_group._proof_14
# sorry bounded_continuous_function.add_comm_group._proof_15
# sorry bounded_continuous_function.add_comm_group._proof_16
# sorry bounded_continuous_function.add_comm_group._proof_17

# sorry continuous_linear_map.comp_left_continuous_bounded._proof_1
# sorry continuous_linear_map.comp_left_continuous_bounded._proof_2
# sorry continuous_linear_map.comp_left_continuous_bounded._proof_3
# sorry continuous_linear_map.comp_left_continuous_bounded._proof_4

# sorry ring_aut.to_add_aut._proof_2
# sorry pi.complete_boolean_algebra
# sorry pi.complete_distrib_lattice
# sorry complete_boolean_algebra.to_complete_distrib_lattice
